#############################################################################
# Copyright (c) 2022 NVIDIA Corporation.  All rights reserved.
#
# NVIDIA Corporation and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA Corporation is strictly prohibited.
#############################################################################

This sample is meant for simple demonstration of how to use DeepStream UCX
communication components for data transfer.

This sample consists of two application graphs.
- The server application uses the "NvDsUcxServerSink" component to wait for a
  client to connect and then send the input data i.e. decoded raw video frames
  to the client over RDMA.
- The client application uses the "NvDsUcxClientSrc" component to receive data
  sent by the client over RDMA i.e. raw video frames in this case and push them
  to downstream components in the application.


For more information on DeepStream UCX GStreamers plugins used by UCX components
in this graph refer to the DeepStream documentation at
https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_plugin_gst-nvdsucx.html

================================================================================
Pre-requisites
================================================================================
- DeepStreamSDK 6.1.1
- Graph-Composer 2.0.1

Some additional pre-requisites are required. Please refer to
https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_plugin_gst-nvdsucx.html#requirements
for more information

NOTE: This sample is supported only for x86.

================================================================================
Running the graph
================================================================================
Run the server first:

Update `addr` parameter in `server-parameters.yaml` to mellanox NIC address on
which the server listens.

On x86:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-ucx-test1-server.yaml \
      server-parameters.yaml -d ../common/target_x86_64.yaml

Run the client next:

Update addr` parameters in `client-parameters.yaml` to address on which the
server is listening. This may be executed on the same device in another terminal
or on another device with a mellanox NIC connected to the server side mellanox
NIC.

On x86:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-ucx-test1-client.yaml \
      client-parameters.yaml -d ../common/target_x86_64.yaml
