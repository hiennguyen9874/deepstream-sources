#############################################################################
# Copyright (c) 2021-2022 NVIDIA Corporation.  All rights reserved.
#
# NVIDIA Corporation and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA Corporation is strictly prohibited.
#############################################################################

This sample builds on top of the "deepstream-test1" graph to demonstrate how to
send messages to the cloud.

The graph contains additional "NvDsSampleProbeMessageMetaCreation" and
"NvDsMsgConvBroker" components which are together responsible for sending messages
to the cloud. NvDsSampleProbeMessageMetaCreation component transforms the metadata
generated by the pipeline into another meta of type NVDS_EVENT_MSG_META. This
meta is serialized by NvDsMsgConvBroker and then sent to the cloud using one
of the message broker protocols.

Creating NVDS_EVENT_MSG_META type of metadata is current legacy mechanism, a
more zero-coding friendly mechanism is being worked upon.

For more information on the cloud messaging including how to setup the various
messaging services, refer to
https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_plugin_gst-nvmsgconv.html
https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_plugin_gst-nvmsgbroker.html

================================================================================
Pre-requisites
================================================================================
- DeepStreamSDK 6.2
- Graph-Composer 2.5.0

================================================================================
Running the graph
================================================================================
On x86:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-test4.yaml \
      parameters.yaml -d ../common/target_x86_64.yaml

On Jetson:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-test4.yaml \
      parameters.yaml -d ../common/target_aarch64.yaml

NOTE: deepstream-test4.yaml is the main graph file describing the DeepStream
graph(pipeline) along with the configuration parameters for the components in the
graph. parameters.yaml can be used to override these parameter values.

** By default the sample is configured to send messages over kafka and thus
needs a kafka broker running. The graph files assume that the server
is running on "localhost:9092". The server to send messages to along with the
topic can be changed by modifying `msg-broker-conn-str` and `topic` parameters
in the parameters.yaml file.

================================================================================
Building application(graph) specific container image
================================================================================
The Graph-Composer Container Builder tool can be used to build application(graph)
specific containers. The container builder configuration files have already been
provided for this sample.

* Building a DGPU container and running on the same host
  $ container_builder -c ds_test4_container_builder_dgpu.yaml \
        -d ../common/target_x86_64.yaml
  $ xhost +
  $ docker run -it --rm --gpus all -v /tmp/.X11-unix/:/tmp/.X11-unix/ \
        -e DISPLAY=:0 --net=host deepstream_test4_dgpu


* Building a Jetson container on x86 host
- In ds_test4_container_builder_jetson.yaml, change <docker-container-registry>
  to a valid docker registry where containers can be pushed, and then build:
  $ container_builder -c ds_test4_container_builder_jetson.yaml \
        -d ../common/target_aarch64.yaml

- Push the built image to the docker registry:
  $ docker push <docker-container-registry>:deepstream-test4-jetson

* Running the image on Jetson
  $ sudo docker pull <docker-container-registry>:deepstream-test4-jetson
  $ xhost +
  $ sudo docker run -it --rm --net=host --runtime nvidia -e DISPLAY=:0 \
        -v /tmp/.X11-unix/:/tmp/.X11-unix \
        -v /tmp/argus_socket:/tmp/argus_socket \
        <docker-container-registry>:deepstream-test4-jetson
