#############################################################################
# Copyright (c) 2021-2022 NVIDIA Corporation.  All rights reserved.
#
# NVIDIA Corporation and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA Corporation is strictly prohibited.
#############################################################################

This sample builds on top of the "deepstream-test1" graph to demonstrate object
tracking and cascaded inferencing to get even more insights from a video stream.

In the graph, "NvDsTracker" component is added after the first "NvDsInferVideo"
component to track objects detected by the component. The "NvDsInferVideo" in
this case is called as Primary Detector. Three "NvDsInferVideo" components are
added after the tracker. These "NvDsInferVideo" components perform classification
on the "Vehicle" class objects detected by the Primary Detector and hence these
"NvDsInferVideo" instances are called "Secondary Classifiers". All the components
attach the information generated by them as metadata to the buffers which can be
extracted by adding a "INvDsInPlaceDataHandler" based component. In the graph,
the three Secondary Classifiers are configured using the following
- NvDsSecondaryCarColorClassifierModel - Classifies color of a car
- NvDsSecondaryCarMakeClassifierModel - Classifies make of a car
- NvDsSecondaryVehicleTypeClassifierModel - Classifies type of a vehicle

================================================================================
Pre-requisites
================================================================================
- DeepStreamSDK 6.1.1
- Graph-Composer 2.0.1

================================================================================
Running the graph
================================================================================
On x86:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-test2.yaml \
      parameters.yaml -d ../common/target_x86_64.yaml

On Jetson:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-test2.yaml \
      parameters.yaml -d ../common/target_aarch64.yaml

NOTE: deepstream-test2.yaml is the main graph file describing the DeepStream
graph(pipeline) along with the configuration parameters for the components in the
graph. parameters.yaml can be used to override these parameter values.

================================================================================
Building application(graph) specific container image
================================================================================
The Graph-Composer Container Builder tool can be used to build application(graph)
specific containers. The container builder configuration files have already been
provided for this sample.

* Building a DGPU container and running on the same host
  $ container_builder -c ds_test2_container_builder_dgpu.yaml \
        -d ../common/target_x86_64.yaml
  $ xhost +
  $ docker run -it --rm --gpus all -v /tmp/.X11-unix/:/tmp/.X11-unix/ \
        -e DISPLAY=:0 deepstream_test2_dgpu


* Building a Jetson container on x86 host
- In ds_test2_container_builder_jetson.yaml, change <docker-container-registry>
  to a valid docker registry where containers can be pushed, and then build:
  $ container_builder -c ds_test2_container_builder_jetson.yaml \
        -d ../common/target_aarch64.yaml

- Push the built image to the docker registry:
  $ docker push <docker-container-registry>:deepstream-test2-jetson

* Running the image on Jetson
  $ sudo docker pull <docker-container-registry>:deepstream-test2-jetson
  $ xhost +
  $ sudo docker run -it --rm --net=host --runtime nvidia -e DISPLAY=:0 \
        -v /tmp/.X11-unix/:/tmp/.X11-unix \
        -v /tmp/argus_socket:/tmp/argus_socket \
        <docker-container-registry>:deepstream-test2-jetson
