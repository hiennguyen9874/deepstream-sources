#############################################################################
# Copyright (c) 2021-2022 NVIDIA Corporation.  All rights reserved.
#
# NVIDIA Corporation and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA Corporation is strictly prohibited.
#############################################################################

This sample builds on top of the "deepstream-test1" graph to demonstrate how to
use a camera source (USB camera using V4L2 API or USB/CSI camera using NVIDIA
Argus API)

This sample uses the "NvDsCameraSrcInput" component for capturing frames from
the camera. The component provides capture parameters such as
width/height/framerate, "type" parameter for capture API selection and
device/sensor-id parameter for device selection in case multiple USB cameras/CSI
sensors are present on the device.

Note: The Argus API is supported only on Jetson

================================================================================
Pre-requisites
================================================================================
- DeepStreamSDK 6.1.1
- Graph-Composer 2.0.1

================================================================================
Running the graph
================================================================================
On x86:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-camera.yaml \
      v4l2-usb-camera.parameters.yaml -d ../common/target_x86_64.yaml

On Jetson:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-camera.yaml \
      v4l2-usb-camera.parameters.yaml -d ../common/target_aarch64.yaml
  OR
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-camera.yaml \
      argus-csi-camera.parameters.yaml -d ../common/target_aarch64.yaml

NOTE: deepstream-camera.yaml is the main graph file describing the DeepStream
graph(pipeline) along with the configuration parameters for the components in the
graph. v4l2-usb-camera.parameters.yaml and argus-csi-camera.parameters.yaml can
be used to override these parameter values.

================================================================================
Building application(graph) specific container image
================================================================================
The Graph-Composer Container Builder tool can be used to build application(graph)
specific containers. The container builder configuration files have already been
provided for this sample.

* Building a DGPU container and running on the same host
  $ container_builder -c ds_camera_container_builder_dgpu.yaml \
        -d ../common/target_x86_64.yaml
  $ xhost +
  $ docker run -it --rm --gpus all -v /tmp/.X11-unix/:/tmp/.X11-unix/ \
        --device /dev/video0 -e DISPLAY=:0 deepstream_camera_dgpu


* Building a Jetson container on x86 host
- In ds_camera_container_builder_jetson.yaml, change <docker-container-registry>
  to a valid docker registry where containers can be pushed, and then build:
  $ container_builder -c ds_camera_container_builder_jetson.yaml \
        -d ../common/target_aarch64.yaml

NOTE: The jetson container builder config uses the v4l2-usb-camera.parameters.yaml
file for capturing frames using V4L2 API. To use the Argus API, modify the config
file to replace v4l2-usb-camera.parameters.yaml with argus-csi-camera.parameters.yaml.

- Push the built image to the docker registry:
  $ docker push <docker-container-registry>:deepstream-camera-jetson

* Running the image on Jetson
  $ sudo docker pull <docker-container-registry>:deepstream-camera-jetson
  $ xhost +
  $ sudo docker run -it --rm --net=host --runtime nvidia -e DISPLAY=:0 \
        -v /tmp/.X11-unix/:/tmp/.X11-unix --device /dev/video0 \
        -v /tmp/argus_socket:/tmp/argus_socket \
        <docker-container-registry>:deepstream-camera-jetson
