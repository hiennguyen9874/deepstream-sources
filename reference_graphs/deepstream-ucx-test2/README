#############################################################################
# Copyright (c) 2022 NVIDIA Corporation.  All rights reserved.
#
# NVIDIA Corporation and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA Corporation is strictly prohibited.
#############################################################################

This sample is meant for simple demonstration of how to use DeepStream UCX
communication components for data transfer.

This sample consists of two application graphs.
- The server application uses the "NvDsUcxServerSrc" component to wait for a
  client to connect and then receive data over RDMA i.e. raw video frames and
  serialized DS metadata to the downstream components. "NvDsMetaDeserialize"
  component deserializes and attaches the DS metadata to the buffer which can
  be consumed by downstream components like "NvDsOsd"

- The client application uses the "NvDsUcxClientSink" component to send data
  (raw video frames in this case) and serialized DS metadata generated by the
  application to the server over RDMA i.e. "NvDsMetaSerialize" component is used
  to serialize DS metadata.


For more information on DeepStream UCX GStreamers plugins used by UCX components
in this graph refer to the DeepStream documentation at
https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_plugin_gst-nvdsucx.html

For more information on DeepStream MetaUtils GStreamers plugins used by
NvDsMetaDeserialize/NvDsMetaSerialize components in this graph refer to the
DeepStream documentation at
https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_plugin_gst-nvdsmetautils.html

NOTE: This sample is supported only for x86.

================================================================================
Pre-requisites
================================================================================
- DeepStreamSDK 6.1.1
- Graph-Composer 2.0.1

Some additional pre-requisites are required. Please refer to
https://docs.nvidia.com/metropolis/deepstream/dev-guide/text/DS_plugin_gst-nvdsucx.html#requirements
for more information

================================================================================
Running the graph
================================================================================
Run the server first:

Update `addr` parameter in `server-parameters.yaml` to mellanox NIC address on
which the server listens.

On x86:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-ucx-test2-server.yaml \
      server-parameters.yaml -d ../common/target_x86_64.yaml

Run the client next:

Update addr` parameters in `client-parameters.yaml` to address on which the
server is listening. This may be executed on the same device in another terminal
or on another device with a mellanox NIC connected to the server side mellanox
NIC.

On x86:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-ucx-test2-client.yaml \
      client-parameters.yaml -d ../common/target_x86_64.yaml
