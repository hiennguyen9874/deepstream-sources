################################################################################
# SPDX-FileCopyrightText: Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: MIT
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
################################################################################

infer_config {
  unique_id: 5
  gpu_ids: [0]
  max_batch_size: 16
  backend {
    output_mem_type: MEMORY_TYPE_CPU
    triton {
      model_name: "triton_custom_backend_ensemble"
      version: -1

      # model_repo block is enabled for using nvinferserver in
      # Triton C-API mode.
      model_repo {
        root: "triton_model_repo"
        strict_model_config: true
      }

      # To run Triton client remote inference, enable 'grpc' block,
      # and disalbe 'model_repo' block.
      # Setup Tritonserver, goto current directory, run
      # tritonserver --model-repository=triton_model_repo
      #grpc {
      #  url: "localhost:8001"
      #}
    }
  }

  preprocess {
    network_format: IMAGE_FORMAT_BGR
    tensor_order: TENSOR_ORDER_LINEAR
    maintain_aspect_ratio: 0
    frame_scaling_hw: FRAME_SCALING_HW_DEFAULT
    frame_scaling_filter: 1
    normalize {
      scale_factor: 1
      mean_file: "../../samples/models/Secondary_CarColor/mean.ppm"
    }
  }

  postprocess {
    other { }
  }

  extra {
    custom_process_funcion: "CreateInferServerCustomProcess"
  }

  custom_lib {
    path: "nvdsinferserver_custom_impl_ensemble/libnvdstriton_custom_impl_ensemble.so"
  }

}
input_control {
  process_mode: PROCESS_MODE_CLIP_OBJECTS
  operate_on_gie_id: 1
  operate_on_class_ids: [0]
  interval: 0
  async_mode: true
  object_control {
    bbox_filter {
      min_width: 128
      min_height: 128
    }
  }
}
