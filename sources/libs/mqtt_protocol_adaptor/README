##################################################################################################
# SPDX-FileCopyrightText: Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: BSD-3-Clause
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##################################################################################################

This project implements the protocol adaptor for MQTT.
The adaptor implements and exposed the DSMI API for client applications to interface with it.

Dependencies
-------------
* glib 2.0
 $ sudo apt-get install libglib2.0 libglib2.0-dev

* mosquitto 1.6.15
 $ wget https://mosquitto.org/files/source/mosquitto-1.6.15.tar.gz
 $ tar -xvf mosquitto-1.6.15.tar.gz
 $ cd mosquitto-1.6.15
 $ make
 $ make install

Run mosquitto broker
--------------------
 $ adduser --system mosquitto 
 $ mosquitto
To run with specific mosquitto broker config file:
 $ mosquitto -c <path_to_config_file>
 Ex:
 $ mosquitto -c /etc/mosquitto/mosquitto.conf

Enable authentication:
----------------------
1. Create a simple text file and enter the username and password pairs, one for each line such as below:
        user1:password1
        user2:password2

2. Encrypt the password file using the following command:
   $ mosquitto_passwd -U <path_to_password_file>

3. Change the following configurations at /etc/mosquitto/mosquitto.conf (or write a new config file):
   allow_anonymous false
   password_file <path_to_password_file>

4. Run the mosquitto broker using the updated config file

mqtt cfg:
---------
* username - the username to be set to authenticate with the mosquitto broker, if enabled
* password - the password to be set to authenticate with the mosquitto broker, if enabled
* share-connection - 0 for no, 1 for yes
    Uncomment the field share-connection in cfg_mqtt.txt and set its value to 1
    if you need to generate a connection signature. This signature is a unique string
    which is generated by parsing all the mqtt connection related params
    used for making a connection
    Uncommenting this field signifies that the connection created can be shared
    with other components within the same process.
* loop-timeout - timeout in ms to pass to the mosquitto_loop() call. Default is 2000 ms.
    This refers to the maximum number of milliseconds to wait for network activity 
    before the call times out. Set to 0 for instant return.

Setup and enable logging:
-------------------------
Before running the sample applications, enable logs by running the logger setup script:
For x86,
 chmod u+x ~/deepstream_x86_public/sources/tools/nvds_logger/setup_nvds_logger.sh
 sudo ~/deepstream_x86_public/sources/tools/nvds_logger/setup_nvds_logger.sh
On Jetson,
 chmod u+x ~/deepstream_sdk_on_jetson/sources/tools/nvds_logger/setup_nvds_logger.sh
 sudo ~/deepstream_sdk_on_jetson/sources/tools/nvds_logger/setup_nvds_logger.sh

To run test program:
--------------------
 make -f Makefile.test
 ./test_mqtt_proto_async

Verify messages:
----------------
Use mosquitto sub client to start a subscriber on the topic. For example, for the topic "topic1":
 $ mosquitto_sub -t topic1 -v

In another terminal, you can also publish messages using the mosquitto pub client. For example, to publish the message "hello world" to the topic "topic1":
 $ mosquitto_pub -t 'topic1' -m 'hello world'

Running test program with TLS (security enabled):
------------------------------------------------------
TLS is not yet supported.

Limitations:
------------
Synchronous send through `nvds_msgapi_send()` is not currently supported. 
New nvmsgbroker API is also not supported (i.e., enabling new-api=1 in deepstream-test5 app will cause the app to fail). 

