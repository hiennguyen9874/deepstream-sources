################################################################################
# Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
################################################################################

infer_config {
  unique_id: 1
  gpu_ids: [0]
  max_batch_size: 4
  backend {
    triton {
      model_name: "resnet18_2d_rgb"
      version: -1

      # model_repo block is enabled for Triton Server CAPI inference.
      model_repo {
        root: "./triton_model_repo"
        strict_model_config: true
      }

      # To run Triton client remote inference, users need enable 'grpc' block,
      # and disalbe 'model_repo' block.
      # Setup Tritonserver, goto current directory, run
      # tritonserver --model-repository=triton_model_repo
      #grpc {
      #  url: "localhost:8001"
      #}
    }
    output_mem_type: MEMORY_TYPE_DEFAULT
  }

  input_tensor_from_meta {
    is_first_dim_batch: true
  }

  postprocess {
    labelfile_path: "labels.txt"
    classification {
      threshold:0.1
    }
  }

  extra {
    output_buffer_pool_size: 4
  }
}

output_control {
  output_tensor_meta: true
}
