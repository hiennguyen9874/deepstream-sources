*****************************************************************************
* Copyright (c) 2022 NVIDIA Corporation.  All rights reserved.
*
* NVIDIA Corporation and its licensors retain all intellectual property
* and proprietary rights in and to this software, related documentation
* and any modifications thereto.  Any use, reproduction, disclosure or
* distribution of this software and related documentation without an express
* license agreement from NVIDIA Corporation is strictly prohibited.
*****************************************************************************

*****************************************************************************
                     deepstream-ucx-test2-app
                             README
*****************************************************************************

===============================================================================
1. Prerequisites:
===============================================================================

Please follow instructions in the apps/sample_apps/deepstream-app/README on how
to install the prequisites for Deepstream SDK, the DeepStream SDK itself and the
apps. In addition, to be able to run the test over an RDMA-enabled network, please
ensure you have also installed the RDMA OFED network stack from here:
https://network.nvidia.com/products/infiniband-drivers/linux/mlnx_ofed/.
MLNX OFED also includes the Unified Communication X framework that is required to
use the Deepstream UCX plugin in gstreamer.

You must have the following development packages installed
   GStreamer-1.0
   GStreamer-1.0 Base Plugins
   GStreamer-1.0 gstrtspserver
   X11 client-side library

To install these packages, execute the following command:
   sudo apt-get install libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev \
   libgstrtspserver-1.0-dev libx11-dev

===============================================================================
2. Purpose:
===============================================================================

This document shall describe about the sample deepstream-ucx-test2 application.

The deepstream-ucx-test2 application is meant for a simple demonstration of how
to use the new communication plugin called nvdsgst_ucx with the Deepstream SDK
along with the new custom serialization and deserialization library called
libnvds_video_metadata_serialization.so.

===============================================================================
3. To compile:
===============================================================================

  $ Set CUDA_VER to 11.7 for x86.
  $ sudo make

Note, the nvdsgst_ucx plugin is not supported on Jetson.

===============================================================================
4. Usage:
===============================================================================

To run:
  1. This test utilizes a custom library to serialize and deserialize the
     metadata generated by the nvinfer plugin. Ensure that you have compiled
     the ucx_serialization library in the gst-nvdsmetautils folder.

  2. Run the server application first. Required parameters (in order) are the
     IP address of server, Port, Height of frame in video, Width of frame in
     video, Path to the ucx_serialization (libnvds_video_metadata_serialization.so)
     library. For example,

    $  ./deepstream-ucx-test2-app-server 192.168.100.1 4000 1920 1080 \
     /opt/nvidia/deepstream/deepstream-6.1/lib/gst-plugins/libnvds_video_metadata_serialization.so

  2. Run the client application next. Required parameters (in order) are the
     IP address of server, Port on server, Path to the nvinfer config, Path to the
     ucx_serialization library, Path to video file. For example,

    $ ./deepstream-ucx-test2-app-client 192.168.100.1 4000 ~/config_infer_primary.txt \
       /opt/nvidia/deepstream/deepstream-6.1/lib/gst-plugins/libnvds_video_metadata_serialization.so \
       /path/to/file.mp4

NOTE: To compile the sources, run make with "sudo" or root permission.

The Deepstream pipeline here consists of the streammux plugin that takes input
from the filesrc after decoding. The streammux passes the frames to the nvinfer plugin
that identifies certain objects in the frames and add that metadata to the frame. The
serialization plugin creates a binary object corresponding to the metadata and adds to
the frame. The nvdsgst_ucx plugin here is used in reverse mode where the client side
acts as the sink and sends the frame and the binary metadata over RDMA network to the
server side of plugin.

Here, we show the server side of the plugin that acts as the source and receives data
from the client. The server then forwards the data to the metadata library which
extracts it to append the metadata to the frame. The nvdsosd plugin interprets the
metadata and passes to fakesink.
